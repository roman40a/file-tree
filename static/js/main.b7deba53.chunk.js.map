{"version":3,"sources":["components/file-tree/file-tree.module.css","components/file-tree-node/file-tree-node.module.css","App/App.module.css","components/file-tree/file-tree.model.ts","components/file-tree/file-tree.utils.ts","components/file-tree-node/file-tree-node.component.tsx","components/file-tree/file-tree.component.tsx","components/file-tree/file-tree.fixture.ts","App/App.tsx","index.tsx"],"names":["module","exports","NodeType","PATH_SPLITTER","parseToNodeWithPath","node","prevPath","title","type","Folder","isFolderNode","path","children","map","FileTreeNode","state","isOpened","handleItemClick","onNodeSelect","props","setState","this","data","outPadding","isFile","File","leftPadding","iconClassName","cn","css","icon","icon__opened","titleClassName","title__file","className","container","item","style","paddingLeft","onClick","i","key","React","PureComponent","FileTree","nodes","selectedPath","handleCreate","nodeType","window","prompt","console","log","handleNodeSelect","createFileClassName","createFile","createFolderClassName","createFolder","nodesWithPath","header","text","createIconsContainer","content","App","fileTreeContainer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7deba53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"file-tree_container__1qFXh\",\"header\":\"file-tree_header__3kziy\",\"icon\":\"file-tree_icon__5ntK1\",\"text\":\"file-tree_text__3gAaZ\",\"content\":\"file-tree_content__1Pnsc\",\"createIconsContainer\":\"file-tree_createIconsContainer__1DcHi\",\"createFile\":\"file-tree_createFile___c5Pl\",\"createFolder\":\"file-tree_createFolder__2nL_e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"file-tree-node_container__y_z_8\",\"item\":\"file-tree-node_item__1qmQu\",\"icon\":\"file-tree-node_icon__3Zvm0\",\"icon__opened\":\"file-tree-node_icon__opened__ZtAEv\",\"title\":\"file-tree-node_title__38XN3\",\"title__file\":\"file-tree-node_title__file__3BQ2V\",\"children\":\"file-tree-node_children__3JB3-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container___P6pN\",\"fileTreeContainer\":\"App_fileTreeContainer__2eGzn\"};","export enum NodeType {\n    Folder,\n    File,\n}\n\nexport type Node = File | Folder;\n\nexport type File = {\n    type: NodeType.File;\n    title: string;\n    children?: undefined;\n};\n\nexport type Folder = {\n    type: NodeType.Folder;\n    title: string;\n    children: Node[];\n};\n","import { Folder, Node, NodeType } from './file-tree.model';\nimport { NodeWithPath } from '../file-tree-node/file-tree-node.model';\n\nexport const PATH_SPLITTER = '/';\n\nconst isFolderNode = (node: Node): node is Folder =>\n    node.type === NodeType.Folder;\n\nexport const parseToNodeWithPath = (\n    node: Node,\n    prevPath: string\n): NodeWithPath => {\n    const { title } = node;\n    if (isFolderNode(node)) {\n        const path = `${prevPath}${title}${PATH_SPLITTER}`;\n        return {\n            ...node,\n            path,\n            children: node.children.map(node =>\n                parseToNodeWithPath(node, path)\n            ),\n        };\n    }\n    return {\n        ...node,\n        path: `${prevPath}${title}`,\n    };\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { NodeWithPath } from './file-tree-node.model';\nimport { NodeType } from '../file-tree/file-tree.model';\n\nimport css from './file-tree-node.module.css';\n\nconst CHILDREN_PADDING = 20;\n\nexport type FileTreeNodeProps = {\n    data: NodeWithPath;\n    outPadding?: number;\n    onNodeSelect(path: string): void;\n};\n\ntype FileTreeNodeState = {\n    isOpened: boolean;\n};\n\nexport class FileTreeNode extends React.PureComponent<\n    FileTreeNodeProps,\n    FileTreeNodeState\n> {\n    readonly state: FileTreeNodeState = {\n        isOpened: false,\n    };\n\n    handleItemClick = (node: NodeWithPath) => () => {\n        const { onNodeSelect } = this.props;\n        this.setState(\n            state => ({ isOpened: !state.isOpened }),\n            () => {\n                onNodeSelect(node.path);\n            }\n        );\n    };\n\n    render() {\n        const { data, outPadding, onNodeSelect } = this.props;\n        const { isOpened } = this.state;\n        const isFile = data.type === NodeType.File;\n        const leftPadding = outPadding || 10;\n\n        const iconClassName = cn(css.icon, {\n            [css.icon__opened]: isOpened && !isFile,\n        });\n\n        const titleClassName = cn(css.title, {\n            [css.title__file]: isFile,\n        });\n\n        return (\n            <div className={css.container}>\n                <div\n                    className={css.item}\n                    style={{ paddingLeft: leftPadding }}\n                    onClick={this.handleItemClick(data)}\n                >\n                    {!isFile && <div className={iconClassName} />}\n                    <div className={titleClassName}>{data.title}</div>\n                </div>\n                {data.children && isOpened && (\n                    <div className={css.children}>\n                        {data.children.map((node, i) => (\n                            <FileTreeNode\n                                key={node.path}\n                                data={node}\n                                outPadding={leftPadding + CHILDREN_PADDING}\n                                onNodeSelect={onNodeSelect}\n                            />\n                        ))}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { parseToNodeWithPath, PATH_SPLITTER } from './file-tree.utils';\nimport { NodeType, Node } from './file-tree.model';\nimport { FileTreeNode } from '../file-tree-node/file-tree-node.component';\n\nimport css from './file-tree.module.css';\n\nexport type FileTreeProps = {\n    data: Node[];\n};\n\ntype FileTreeState = {\n    nodes: Node[];\n    selectedPath: string;\n};\n\nexport class FileTree extends React.PureComponent<\n    FileTreeProps,\n    FileTreeState\n> {\n    readonly state: FileTreeState = {\n        nodes: this.props.data,\n        selectedPath: PATH_SPLITTER,\n    };\n\n    handleCreate = (nodeType: NodeType) => () => {\n        const isFile = nodeType === NodeType.File;\n        const title = window.prompt(\n            `Please write a title for ${isFile ? 'file' : 'folder'}`,\n            `new ${isFile ? 'file' : 'folder'}`\n        );\n        console.log(title);\n    };\n\n    handleNodeSelect = (path: string) => {\n        console.log(path);\n        this.setState({ selectedPath: path });\n    };\n\n    render() {\n        const { nodes } = this.state;\n\n        const createFileClassName = cn(css.icon, css.createFile);\n        const createFolderClassName = cn(css.icon, css.createFolder);\n\n        const nodesWithPath = nodes.map(node =>\n            parseToNodeWithPath(node, PATH_SPLITTER)\n        );\n\n        return (\n            <div className={css.container}>\n                <div className={css.header}>\n                    <div\n                        className={css.icon}\n                        onClick={() => this.handleNodeSelect(PATH_SPLITTER)}\n                    />\n                    <div className={css.text}>Files</div>\n                    <div className={css.createIconsContainer}>\n                        <div\n                            className={createFileClassName}\n                            onClick={this.handleCreate(NodeType.File)}\n                        />\n                        <div\n                            className={createFolderClassName}\n                            onClick={this.handleCreate(NodeType.Folder)}\n                        />\n                    </div>\n                </div>\n                <div className={css.content}>\n                    {nodesWithPath.map(node => (\n                        <FileTreeNode\n                            key={node.path}\n                            data={node}\n                            onNodeSelect={this.handleNodeSelect}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import { NodeType, Node } from './file-tree.model';\n\nexport const data: Node[] = [\n    {\n        type: NodeType.Folder,\n        title: 'closed_folder',\n        children: [],\n    },\n    {\n        type: NodeType.Folder,\n        title: 'folder1',\n        children: [\n            {\n                type: NodeType.Folder,\n                title: 'sub_folder',\n                children: [\n                    {\n                        type: NodeType.File,\n                        title:\n                            'activeFileshdgfjashgdfjhasgdjfhagsdjhfgasjdhfgjsahdgfjhs.txt',\n                    },\n                    {\n                        type: NodeType.Folder,\n                        title: 'closed_folder',\n                        children: [],\n                    },\n                    {\n                        type: NodeType.Folder,\n                        title: 'folder1',\n                        children: [\n                            {\n                                type: NodeType.Folder,\n                                title: 'sub_folder',\n                                children: [\n                                    {\n                                        type: NodeType.File,\n                                        title:\n                                            'activeFileshdgfjashgdfjhasgdjfhagsdjhfgasjdhfgjsahdgfjhs.txt',\n                                    },\n                                ],\n                            },\n                        ],\n                    },\n                    {\n                        type: NodeType.Folder,\n                        title: 'folder2',\n                        children: [\n                            {\n                                type: NodeType.File,\n                                title: 'addwindow.html',\n                            },\n                        ],\n                    },\n                    {\n                        type: NodeType.Folder,\n                        title: 'folder3',\n                        children: [\n                            {\n                                type: NodeType.File,\n                                title: 'addwindow.html',\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        type: NodeType.Folder,\n        title: 'folder2',\n        children: [\n            {\n                type: NodeType.File,\n                title: 'addwindow.html',\n            },\n        ],\n    },\n    {\n        type: NodeType.Folder,\n        title: 'folder3',\n        children: [\n            {\n                type: NodeType.File,\n                title: 'addwindow.html',\n            },\n        ],\n    },\n];\n","import React from 'react';\nimport { FileTree } from '../components/file-tree/file-tree.component';\nimport { data } from '../components/file-tree/file-tree.fixture';\n\nimport css from './App.module.css';\n\nexport class App extends React.PureComponent {\n    render() {\n        return (\n            <div className={css.container}>\n                <div className={css.fileTreeContainer}>\n                    <FileTree data={data} />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}